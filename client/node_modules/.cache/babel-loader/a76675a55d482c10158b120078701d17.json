{"ast":null,"code":"import apiClient from\"../lib/ApiClient\";export var addToCartRequest=function addToCartRequest(){return{type:\"ADD_TO_CART_REQUEST\"};};export var addProductSuccess=function addProductSuccess(newProduct){return{type:\"PRODUCT_ADDED\",payload:newProduct};};export var deleteProductSuccess=function deleteProductSuccess(productId){return{type:\"PRODUCT_DELETED\",payload:productId};};export var updateProductSuccess=function updateProductSuccess(newProduct){return{type:\"PRODUCT_UPDATED\",payload:newProduct};};export var addToCartSuccess=function addToCartSuccess(item){return{type:\"ADDED_TO_CART\",item:item};};export var productsReceivedSuccess=function productsReceivedSuccess(products){return{type:\"PRODUCTS_RECEIVED\",payload:products};};export var cartItemsReceivedSuccess=function cartItemsReceivedSuccess(cartItems){return{type:\"CART_ITEMS_RECEIVED\",payload:cartItems};};export var checkoutSuccess=function checkoutSuccess(){return{type:\"CHECKOUT\"};};export function fetchProductsAction(callback){return function(dispatch){apiClient.getProducts(function(products){dispatch(productsReceivedSuccess(products));});if(callback){callback();}};}export function addProductAction(product,callback){return function(dispatch){apiClient.addProduct(product,function(newProduct){dispatch(addProductSuccess(newProduct));});if(callback){callback();}};}export function deleteProductAction(productId,callback){return function(dispatch){apiClient.deleteProduct(productId,function(){dispatch(deleteProductSuccess(productId));});if(callback){callback();}};}export function updateProductAction(product,productId,callback){return function(dispatch){apiClient.updateProduct(productId,product,function(newProduct){dispatch(updateProductSuccess(newProduct));});if(callback){callback();}};}export function fetchCartItemsAction(callback){return function(dispatch){apiClient.getCartItems(function(cartItems){dispatch(cartItemsReceivedSuccess(cartItems));});if(callback){callback();}};}export function addToCartAction(cartItem,productId,callback){return function(dispatch){dispatch(addToCartRequest());apiClient.updateProduct(productId,cartItem,function(updatedProduct){apiClient.addToCart(updatedProduct,function(item){dispatch(addToCartSuccess(item));});});if(callback){callback();}};}export function checkoutAction(callback){return function(dispatch){apiClient.checkout(function(){dispatch(checkoutSuccess());});if(callback){callback();}};}","map":{"version":3,"sources":["/home/srdjan/Desktop/2105/shopping_cart_solution/client/src/actions/productActions.js"],"names":["apiClient","addToCartRequest","type","addProductSuccess","newProduct","payload","deleteProductSuccess","productId","updateProductSuccess","addToCartSuccess","item","productsReceivedSuccess","products","cartItemsReceivedSuccess","cartItems","checkoutSuccess","fetchProductsAction","callback","dispatch","getProducts","addProductAction","product","addProduct","deleteProductAction","deleteProduct","updateProductAction","updateProduct","fetchCartItemsAction","getCartItems","addToCartAction","cartItem","updatedProduct","addToCart","checkoutAction","checkout"],"mappings":"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","sourcesContent":["import apiClient from \"../lib/ApiClient\";\n\nexport const addToCartRequest = () => {\n  return { type: \"ADD_TO_CART_REQUEST\" };\n};\n\nexport const addProductSuccess = (newProduct) => {\n  return { type: \"PRODUCT_ADDED\", payload: newProduct };\n};\n\nexport const deleteProductSuccess = (productId) => {\n  return { type: \"PRODUCT_DELETED\", payload: productId };\n};\n\nexport const updateProductSuccess = (newProduct) => {\n  return { type: \"PRODUCT_UPDATED\", payload: newProduct };\n};\n\nexport const addToCartSuccess = (item) => {\n  return { type: \"ADDED_TO_CART\", item };\n};\n\nexport const productsReceivedSuccess = (products) => {\n  return { type: \"PRODUCTS_RECEIVED\", payload: products };\n};\n\nexport const cartItemsReceivedSuccess = (cartItems) => {\n  return { type: \"CART_ITEMS_RECEIVED\", payload: cartItems };\n};\n\nexport const checkoutSuccess = () => {\n  return { type: \"CHECKOUT\" };\n};\n\nexport function fetchProductsAction(callback) {\n  return function (dispatch) {\n    apiClient.getProducts((products) => {\n      dispatch(productsReceivedSuccess(products));\n    });\n    if (callback) {\n      callback();\n    }\n  };\n}\n\nexport function addProductAction(product, callback) {\n  return function (dispatch) {\n    apiClient.addProduct(product, (newProduct) => {\n      dispatch(addProductSuccess(newProduct));\n    });\n\n    if (callback) {\n      callback();\n    }\n  };\n}\n\nexport function deleteProductAction(productId, callback) {\n  return function (dispatch) {\n    apiClient.deleteProduct(productId, () => {\n      dispatch(deleteProductSuccess(productId));\n    });\n    if (callback) {\n      callback();\n    }\n  };\n}\n\nexport function updateProductAction(product, productId, callback) {\n  return function (dispatch) {\n    apiClient.updateProduct(productId, product, (newProduct) => {\n      dispatch(updateProductSuccess(newProduct));\n    });\n    if (callback) {\n      callback();\n    }\n  };\n}\n\nexport function fetchCartItemsAction(callback) {\n  return function (dispatch) {\n    apiClient.getCartItems((cartItems) => {\n      dispatch(cartItemsReceivedSuccess(cartItems));\n    });\n    if (callback) {\n      callback();\n    }\n  };\n}\n\nexport function addToCartAction(cartItem, productId, callback) {\n  return function (dispatch) {\n    dispatch(addToCartRequest());\n    apiClient.updateProduct(productId, cartItem, (updatedProduct) => {\n      apiClient.addToCart(updatedProduct, (item) => {\n        dispatch(addToCartSuccess(item));\n      });\n    });\n    if (callback) {\n      callback();\n    }\n  };\n}\n\nexport function checkoutAction(callback) {\n  return function (dispatch) {\n    apiClient.checkout(() => {\n      dispatch(checkoutSuccess());\n    });\n    if (callback) {\n      callback();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}