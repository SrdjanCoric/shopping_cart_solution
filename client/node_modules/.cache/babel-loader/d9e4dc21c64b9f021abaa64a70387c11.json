{"ast":null,"code":"export var cart=function cart(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"ADDED_TO_CART\":var someInCart=state.some(function(item){return item._id===action.item._id;});var updatedCart;while(action.item.quantity>0){if(someInCart){updatedCart=state.map(function(product){if(product._id===action.item._id){return Object.assign({},product,{quantity:product.quantity+1});}else{return product;}});}else{updatedCart=state.concat(Object.assign({},action.item,{quantity:1}));}return updatedCart;}return state;case\"CART_ITEMS_RECEIVED\":return action.payload;case\"CHECKOUT\":return[];default:return state;}};","map":{"version":3,"sources":["/home/srdjan/Desktop/2105/shopping_cart_solution/client/src/lib/reducers/cart.js"],"names":["cart","state","action","type","someInCart","some","item","_id","updatedCart","quantity","map","product","Object","assign","concat","payload"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAwB,IAAvBC,CAAAA,KAAuB,2DAAf,EAAe,IAAXC,CAAAA,MAAW,2CAC1C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,eAAL,CACE,GAAMC,CAAAA,UAAU,CAAGH,KAAK,CAACI,IAAN,CAAW,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,GAAL,GAAaL,MAAM,CAACI,IAAP,CAAYC,GAAnC,EAAX,CAAnB,CACA,GAAIC,CAAAA,WAAJ,CAEA,MAAON,MAAM,CAACI,IAAP,CAAYG,QAAZ,CAAuB,CAA9B,CAAiC,CAC/B,GAAIL,UAAJ,CAAgB,CACdI,WAAW,CAAGP,KAAK,CAACS,GAAN,CAAU,SAACC,OAAD,CAAa,CACnC,GAAIA,OAAO,CAACJ,GAAR,GAAgBL,MAAM,CAACI,IAAP,CAAYC,GAAhC,CAAqC,CACnC,MAAOK,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBF,OAAlB,CAA2B,CAChCF,QAAQ,CAAEE,OAAO,CAACF,QAAR,CAAmB,CADG,CAA3B,CAAP,CAGD,CAJD,IAIO,CACL,MAAOE,CAAAA,OAAP,CACD,CACF,CARa,CAAd,CASD,CAVD,IAUO,CACLH,WAAW,CAAGP,KAAK,CAACa,MAAN,CACZF,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBX,MAAM,CAACI,IAAzB,CAA+B,CAAEG,QAAQ,CAAE,CAAZ,CAA/B,CADY,CAAd,CAGD,CACD,MAAOD,CAAAA,WAAP,CACD,CACD,MAAOP,CAAAA,KAAP,CACF,IAAK,qBAAL,CACE,MAAOC,CAAAA,MAAM,CAACa,OAAd,CACF,IAAK,UAAL,CACE,MAAO,EAAP,CACF,QACE,MAAOd,CAAAA,KAAP,CA7BJ,CA+BD,CAhCM","sourcesContent":["export const cart = (state = [], action) => {\n  switch (action.type) {\n    case \"ADDED_TO_CART\":\n      const someInCart = state.some((item) => item._id === action.item._id);\n      let updatedCart;\n\n      while (action.item.quantity > 0) {\n        if (someInCart) {\n          updatedCart = state.map((product) => {\n            if (product._id === action.item._id) {\n              return Object.assign({}, product, {\n                quantity: product.quantity + 1,\n              });\n            } else {\n              return product;\n            }\n          });\n        } else {\n          updatedCart = state.concat(\n            Object.assign({}, action.item, { quantity: 1 })\n          );\n        }\n        return updatedCart;\n      }\n      return state;\n    case \"CART_ITEMS_RECEIVED\":\n      return action.payload;\n    case \"CHECKOUT\":\n      return [];\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}